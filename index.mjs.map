{"version":3,"file":"index.mjs","sources":["../lib/accessors.js","../lib/ndarray.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gapxsumpw( 4, 5.0, arraylike2object( x ), 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + get( xbuf, ix ) );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + get( xbuf, ix );\n\t\ts1 = alpha + get( xbuf, ix+strideX );\n\t\ts2 = alpha + get( xbuf, ix+(2*strideX) );\n\t\ts3 = alpha + get( xbuf, ix+(3*strideX) );\n\t\ts4 = alpha + get( xbuf, ix+(4*strideX) );\n\t\ts5 = alpha + get( xbuf, ix+(5*strideX) );\n\t\ts6 = alpha + get( xbuf, ix+(6*strideX) );\n\t\ts7 = alpha + get( xbuf, ix+(7*strideX) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + get( xbuf, ix );\n\t\t\ts1 += alpha + get( xbuf, ix+strideX );\n\t\t\ts2 += alpha + get( xbuf, ix+(2*strideX) );\n\t\t\ts3 += alpha + get( xbuf, ix+(3*strideX) );\n\t\t\ts4 += alpha + get( xbuf, ix+(4*strideX) );\n\t\t\ts5 += alpha + get( xbuf, ix+(5*strideX) );\n\t\t\ts6 += alpha + get( xbuf, ix+(6*strideX) );\n\t\t\ts7 += alpha + get( xbuf, ix+(7*strideX) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, strideX, ix ) + gapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport floor from '@stdlib/math-base-special-floor';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumpw( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, alpha, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * ( alpha + x[ ix ] );\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = alpha + x[ ix ];\n\t\ts1 = alpha + x[ ix+strideX ];\n\t\ts2 = alpha + x[ ix+(2*strideX) ];\n\t\ts3 = alpha + x[ ix+(3*strideX) ];\n\t\ts4 = alpha + x[ ix+(4*strideX) ];\n\t\ts5 = alpha + x[ ix+(5*strideX) ];\n\t\ts6 = alpha + x[ ix+(6*strideX) ];\n\t\ts7 = alpha + x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += alpha + x[ ix ];\n\t\t\ts1 += alpha + x[ ix+strideX ];\n\t\t\ts2 += alpha + x[ ix+(2*strideX) ];\n\t\t\ts3 += alpha + x[ ix+(3*strideX) ];\n\t\t\ts4 += alpha + x[ ix+(4*strideX) ];\n\t\t\ts5 += alpha + x[ ix+(5*strideX) ];\n\t\t\ts6 += alpha + x[ ix+(6*strideX) ];\n\t\t\ts7 += alpha + x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += alpha + x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gapxsumpw( n, alpha, x, strideX, ix ) + gapxsumpw( N-n, alpha, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Adds a scalar constant to each strided array element and computes the sum using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*/\nfunction gapxsumpw( N, alpha, x, strideX ) {\n\treturn ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Add a scalar constant to each strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gapxsumpw\n*\n* @example\n* import gapxsumpw from '@stdlib/blas-ext-base-gapxsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gapxsumpw( x.length, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import gapxsumpw from '@stdlib/blas-ext-base-gapxsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["BLOCKSIZE","gapxsumpw","N","alpha","x","strideX","offsetX","xbuf","get","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","i","data","accessors","floor","o","arraylike2object","accessorProtocol","ndarray","stride2offset","setReadOnly","main"],"mappings":"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"}